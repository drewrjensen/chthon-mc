name: Create and publish a Docker image

on:
  push:
    tags:
      - 'v*.*.*-*'  # Match tags like v1.21.7-1

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Load VERSION from .env
        id: version
        run: |
          source .env
          VERSION="${MC_VERSION}-${CMC_VERSION}"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Verify tag matches .env VERSION
        run: |
          TAG_VERSION="${GITHUB_REF##*/}"        # Get full tag name (e.g. v1.21.7-1)
          ENV_VERSION=$(source .env && echo -n "${MC_VERSION}-${CMC_VERSION}")

          # Strip 'v' prefix from tag
          TAG_VERSION_STRIPPED="${TAG_VERSION#v}"

          echo "Git tag (${TAG_VERSION}) vs .env version (${ENV_VERSION})"
          if [ "$TAG_VERSION_STRIPPED" != "$ENV_VERSION" ]; then
            echo "❌ Git tag (${TAG_VERSION}) does not match .env version (${ENV_VERSION})"
            exit 1
          fi

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ steps.version.outputs.version }},enable=true

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Replace {{TAG}} in .env and chthon-mc-compose.yaml
        run: |
          sed -i "s|{{TAG}}|${{ steps.version.outputs.version }}|g" .env
          sed -i "s|{{TAG}}|${{ steps.version.outputs.version }}|g" chthon-mc-compose.yaml

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Create GitHub Release
        id: create_release
        run: |
          VERSION=${{ steps.version.outputs.version }}
          echo "Creating release for tag v${VERSION}"
          RESPONSE=$(curl -s -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -d '{"tag_name": "'"v${VERSION}"'", "name": "'"v${VERSION}"'", "body": "Release for version ${VERSION}"}' \
            https://api.github.com/repos/${{ github.repository }}/releases)
          if echo "$RESPONSE" | grep -q "Validation Failed"; then
            echo "Error: Failed to create release"
            echo "$RESPONSE"
            exit 1
          fi
          RELEASE_ID=$(echo "$RESPONSE" | jq -r .id)
          echo "release_id=$RELEASE_ID" >> $GITHUB_OUTPUT

      - name: Upload chthon-mc-compose.yaml and .env as release assets
        run: |
          for file in chthon-mc-compose.yaml .env; do
            curl -L -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/octet-stream" \
              --data-binary @$file \
              "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.create_release.outputs.release_id }}/assets?name=$(basename $file)"
          done