name: Create and publish a Docker image

on:
  push:
    tags:
      - 'v*.*.*-*'  # Match tags like v1.21.7-1

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Load VERSION from .env
        id: version
        run: |
          export $(grep -v '^#' .env | xargs)
          VERSION="${MC_VERSION}-${CMC_VERSION}"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "PAPERMC_VERSION=$PAPERMC_VERSION" >> $GITHUB_ENV
          echo "PAPERMC_BUILD=$PAPERMC_BUILD" >> $GITHUB_ENV
          echo "PAPERMC_VERSION=$PAPERMC_VERSION" >> $GITHUB_OUTPUT
          echo "PAPERMC_BUILD=$PAPERMC_BUILD" >> $GITHUB_OUTPUT

      - name: Set dynamic env from version step
        run: echo "ENV READY"
        env:
          PAPERMC_VERSION: ${{ steps.version.outputs.PAPERMC_VERSION }}
          PAPERMC_BUILD: ${{ steps.version.outputs.PAPERMC_BUILD }}

      - name: Verify tag matches .env VERSION
        run: |
          TAG_VERSION="${GITHUB_REF##*/}"
          ENV_VERSION=$(source .env && echo -n "${MC_VERSION}-${CMC_VERSION}")
          TAG_VERSION_STRIPPED="${TAG_VERSION#v}"
          echo "Git tag (${TAG_VERSION}) vs .env version (${ENV_VERSION})"
          if [ "$TAG_VERSION_STRIPPED" != "$ENV_VERSION" ]; then
            echo "‚ùå Git tag (${TAG_VERSION}) does not match .env version (${ENV_VERSION})"
            exit 1
          fi

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ steps.version.outputs.version }},enable=true

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            PAPERMC_VERSION=${{ steps.version.outputs.PAPERMC_VERSION }}
            PAPERMC_BUILD=${{ steps.version.outputs.PAPERMC_BUILD }}

      - name: Replace {{TAG}} in .env and compose.yaml
        run: |
          sed -i "s|{{TAG}}|${{ steps.version.outputs.version }}|g" .env
          sed -i "s|{{TAG}}|${{ steps.version.outputs.version }}|g" compose.yaml

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Create GitHub Release
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION=${{ steps.version.outputs.version }}
          TAG="v$VERSION"
          echo "Creating GitHub release for $TAG"
          gh release create "$TAG" \
            --title "$TAG" \
            --notes "Release for version $VERSION" \
            --repo "${{ github.repository }}" \
            --verify-tag

      - name: Upload release assets
        run: |
          TAG="v${{ steps.version.outputs.version }}"
          gh release upload "$TAG" compose.yaml .env k8s/* --repo "${{ github.repository }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}